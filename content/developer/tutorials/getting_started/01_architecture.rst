.. _tutorials/getting_started/01_architecture:

================================
Розділ 1: Огляд архітектури
================================

Багаторівневий додаток
=====================

Odoo дотримується "багаторівневої архітектури", що означає, що презентація, бізнес-логіка
логіка та зберігання даних розділені. Більш конкретно, він використовує трирівневу архітектуру
(зображення з Вікіпедії):

.. image:: 01_architecture/three_tier.svg
    :align: center
    :alt: Three-tier architecture

Презентаційний рівень - це комбінація HTML5, JavaScript та CSS. Логічний рівень написаний виключно на 
Python, тоді як рівень даних підтримує лише PostgreSQL як СУБД.

Залежно від обсягу вашого модуля, розробка Odoo може бути виконана на будь-якому з цих рівнів.
Тому, перш ніж йти далі, буде корисно освіжити пам'ять, якщо ви не маєте середнього рівня в цих темах.

Для того, щоб пройти цей туторіал, вам знадобляться базові знання HTML і середній рівень володіння 
мовою Python. Більш складні теми потребують глибших знань з інших предметів. У вільному доступі є 
багато підручників, але ми не можемо рекомендувати один з них, оскільки це залежить від від вашого 
досвіду.

Для довідки пропонуємо вам офіційний підручник `Python tutorial`_.

.. note::
  Починаючи з версії 15.0, Odoo активно переходить на використання власного фреймворку `OWL
  framework <https://odoo.github.io/owl/>`_ як частину презентаційного рівня. Попередній 
  фреймворк JavaScript все ще підтримується але з часом буде застарілим. Це буде обговорено 
  в наступних темах.

Модулі Odoo
============

І серверні, і клієнтські розширення упаковані як *modules*, які за бажанням завантажуються в 
*database*. Модуль - це набір функцій і даних, які призначені для однієї цілі.

Модулі Odoo можуть додавати абсолютно нову бізнес-логіку до системи Odoo або змінювати та 
розширювати існуючу. Один модуль може бути створений для додавання правил бухгалтерського 
обліку вашої країни до загальної бухгалтерської підтримки Odoo, в той час як інший модуль 
може додати підтримку візуалізації автобусного парку в режимі реального часу.


Все в Odoo починається і закінчується модулями.

Термінологія: розробники групують свої бізнес-функції в *modules* Odoo. Основні користувацькі
модулі позначені і відображаються як додатки (*Apps*), але більшість модулів не є додатками. 
*Modules* можуть також називатися *addons*, а директорії, де їх знаходить сервер Odooутворюють 
``addons_path``.

Композиція модуля
-----------------------

Модуль Odoo **може** містити декілька елементів:

:ref:`Business objects <reference/orm>`
     Бізнес-об'єкт (наприклад, інвойс) оголошується як клас Python. Поля, визначені в цих класах, 
     автоматично зіставляються зі стовпцями бази даних завдяки шарові :abbr:`ORM (Object-Relational 
     Mapping)`.

:ref:`Object views <reference/views>`
    Визначення UI відображення

:ref:`Data files <reference/data>`
    XML або CSV файли, що декларують дані моделі:

    * :ref:`views <reference/views>` чи :ref:`reports <reference/reports>`,
    * конфігураційні дані (параметризація модулів, :ref:`правила безпеки <reference/security>`),
    * демонстраційні дані
    * та багато іншого

:ref:`Web controllers <reference/controllers>`
    Обробка запитів від веб-браузерів

Статичні веб-дані
    Зображення, файли CSS або JavaScript, що використовуються веб-інтерфейсом або веб-сайтом

Жоден з цих елементів не є обов'язковим. Деякі модулі можуть додавати лише файли даних (наприклад, 
конфігурацію обліку для конкретної країни), тоді як інші можуть додавати лише бізнес-об'єкти. Під 
час цього тренінгу ми створимо business objects (бізнес-об'єкти), object views (представлення об'єктів) 
і data files (файли даних).

Структура модуля
----------------
Кожен модуль є директорією всередині *module directory*. Каталоги модулів задаються за допомогою опції
:option:`--addons-path <odoo-bin --addons-path>`.

Модуль Odoo оголошується за допомогою його :ref:`manifest <reference/module/manifest>`.

Коли модуль Odoo включає бізнес-об'єкти (тобто файли Python), вони організовуються як
`Python package <https://docs.python.org/3/tutorial/modules.html#packages>`_
з файлом ``__init__.py``. Цей файл містить інструкції імпорту для різних Python файлів у модулі.

Нижче наведено спрощений каталог модулів:

.. code-block:: bash

    module
    ├── models
    │   ├── *.py
    │   └── __init__.py
    ├── data
    │   └── *.xml
    ├── __init__.py
    └── __manifest__.py

Odoo Editions
=============

Odoo доступний у `two versions`_: Odoo Enterprise (ліцензована & shared sources) та Odoo Community 
(відкритий вихідний код). На додаток до таких послуг, як підтримка або оновлення, версія Enterprise 
надає додатковий функціонал для Odoo. З технічної точки зору, ці функції - це просто нові модулі, 
встановлені поверх модулів, що надаються версією Community.

Готові почати? Перш ніж писати власне код, давайте перейдемо до :doc:`next chapter <02_setup>` щоб 
ознайомитися з процесом встановлення Odoo. Навіть якщо Odoo вже працює у вашій системі, ми наполегливо 
рекомендуємо вам прочитати цей розділ, щоб переконатися, що ми починаємо з однакових позицій під час 
розробки нашого нового додатку.

.. _multitier architecture:
    https://en.wikipedia.org/wiki/Multitier_architecture

.. _Python tutorial:
    https://docs.python.org/3.7/tutorial/

.. _two versions:
    https://www.odoo.com/page/editions
